#+title: Software Patterns and Components
#+author: Vladimir Inđić
#+OPTIONS: toc:nil
#+OPTIONS: date:nil

* Software Patterns and Components

  This repository contains materials and guidelines for the Software Patterns and Components course.
  The goal of this course is to teach students how to develop software components in Python.
  The reminder of the document assumes that you are using Linux operating system.
  For other operating systems, you should consult the official documentation or [[https://www.google.com/][google.com]].

* Python Programming Language

  The programming language used for this course is [[https://en.wikipedia.org/wiki/Python_(programming_language)][Python]]. The installation instructions can be found
  at the [[https://www.python.org/][official documentation]]. Note that the majority of Linux distributions already have preinstall
  Python interpreter.

  If you are not familiar with Python, it is recommended to do some Python
  tutorials that can be easily found [[https://www.youtube.com/results?search_query=python+tutorial][on the web]].
  

** Python Tools

   It is not recommended to use system interpreter while developing the application in Python.
   Instead, the good practice is to use virtual environments.
   This is what official documentations says about virtual environments:
   /"A virtual environment is a Python environment such that the Python interpreter, libraries and scripts
   installed into it are isolated from those installed in other virtual environments, and (by default) any
   libraries installed in a “system” Python, i.e., one which is installed as part of your operating system.
   A virtual environment is a directory tree which contains Python executable files and other files which
   indicate that it is a virtual environment."/

   To simplify, virtual environment contains the copy of system interpreter which should used
   while developing Python applications without concerns that any important system library might get corrupted.   

*** venv and virtualenv

    [[https://docs.python.org/3/library/venv.html][/venv/]] and [[https://virtualenv.pypa.io/en/latest/][/virtualenv/]] could be used for maintaining virtual environments. From the user perspective,
    both tools are equivalent. The /venv/ should come preinstalled with newer versions of Python 3 interpreters,
    while virtualenv requires [[https://virtualenv.pypa.io/en/latest/installation.html#via-pip][manual installation]].

    To create virtual environment called ~test-py3~, open the terminal (console, command prompt) and type one of the following
    two commands:
    #+begin_src shell
    # creating virtual environment by using venv tool
    python3 -m venv test-py3
    # creating virtual environment by using virtualenv tool
    virtualenv test-py3
    #+end_src

    To activate the created virtual environment, type the following command:
    #+begin_src shell
    source test-py3/bin/activate
    #+end_src

    To deactivate the virtual environment, exit the terminal or type the command ~deactivate~.

    *NOTE:* There is no difference in using the python interpreter of virtual environment comparing to the using
    system python interpreter.

*** pip

    The tool used for the installation of Python packages is [[https://pypi.org/project/pipa/][/pip/]].
    It should come preinstalled with Python 3 interpreter. If not, consult [[https://pip.pypa.io/en/stable/installation/][the official documentation
    about the installation]].

    This sections assumes that you've recently created and activated ~test-py3~ virtual environment.
    To see all packages installed, type the command:
    #+begin_src shell
    pip list
    # >>> The output should be liked this:
    # Package    Version
    # ---------- -------
    # pip        21.3
    # setuptools 58.2.0
    # wheel      0.37.0
    #+end_src
    
    To install new package (e.g. Django), type the following command:
    #+begin_src shell
    pip install Django
    #+end_src

    To uninstall the package (e.g. Django), type the following command:
    #+begin_src shell
    pip uninstall Django
    #+end_src

   
*** PyCharm IDE
    The recommended IDE for Python development is [[https://www.jetbrains.com/pycharm/download/#section=linux][PyCharm]]. Students that have e-mail addresses
    with the /uns.ac.rs/ domain are eligible to submit the request to receive free one-year license
    for PyCharm Professional Edition.
    
    
*** Setuptools
    [[https://setuptools.pypa.io/en/latest/][Setuptools]] is a fully-featured, actively-maintained, and stable library designed to facilitate packaging Python projects.
    For the purposes of this course, this tool will be used to enable packaging, distributing and installing independent Python components
    that can [[https://setuptools.pypa.io/en/latest/pkg_resources.html][be dynamically recognized and imported]] in the Python application to extend it with additional features/functionalities.
    Setuptools enables developing Python plugins that are prerequisites for developing extensible/pluggable applications.

    A simple example of using the setuptools can be found inside [[https://github.com/vladaindjic/SPC-exchange-students/tree/master/ComponentsSimple][~ComponentsSimple~ directory]].


*** Tkinter
    A recommended library to be used for GUI desktop application in Python is [[https://docs.python.org/3/library/tkinter.html][~tkinter~]]. 
    A simple text editor developed by using the tkinter library can be found
    [[https://github.com/vladaindjic/SPC-exchange-students/blob/master/GUIAppExample/text_editor.py][in this python module]].

*** Pygments Lexer
    [[https://github.com/vladaindjic/SPC-exchange-students/blob/master/GUIAppExample/text_editor.py][Pygments package]] contains a set of lexer for different programming languages implemented in Python.
    A example of using the Pygments Python Lexer to do the lexical analysis on simple Python source code
    can be found [[https://github.com/vladaindjic/SPC-exchange-students/blob/master/LexerExample/tokenizer.py][in this python module]].

    
* The Project Specification - Extensible Code Editor

  The project specification for this course can be found [[https://github.com/vladaindjic/SPC-exchange-students/blob/master/SPEC.md][in this document]].
    
